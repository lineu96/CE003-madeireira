pt(90, 63)
dt(90, 63)
pt(90, 63)
pt(90, 63, lower.tail = F)
round(pt(90, 63, lower.tail = F))
round(pt(90, 63, lower.tail = F),2)
round(pt(90, 63, lower.tail = F),3)
round(pt(90, 63, lower.tail = F),4)
round(pt(90, 63, lower.tail = F),5)
round(pt(90, 63, lower.tail = F),6)
round(pt(90, 63, lower.tail = F),7)
round(pt(90, 63, lower.tail = F),8)
round(pt(90, 63, lower.tail = F),9)
qt(0.9. 63)
qt(0.9, 63)
2.5
7*2.5
7*0.5
2.5+3.5
6+2
3/7
2/7
1/7
2/7
2.5/7
3/7
3.5/7
0.7*7
10/50
12/50
13/50
14/50
(5.2/sqrt(64))*1.645
22.4-1.06925
22.4+1.06925
qnorm(0.99)
8*8
5.2/8
(22.4-20)/(5.2/8)
(22.4-20)/(5.2/sqrt(64))
2,33*5.2
2.33*5.2
(2.33*5.2)/8
((2.33*5.2)/8)+20
(22.4-20)/(4.5/sqrt(64))
pt(0.9, 63)
(1.96*4.5)/3
((1.96*4.5)/3)^2
((1.96*4.5))^2
4.5/sqrt(78)
2.576*(4.5/sqrt(78))
(2.576*(4.5/sqrt(78)))
40+(2.576*(4.5/sqrt(78)))
40-(2.576*(4.5/sqrt(78)))
(40-35)/(4.5/sqrt(78))
sqrt(78)
4.5/sqrt(78)
4/(4.5/sqrt(78))
5/(4.5/sqrt(78))
((1.645*4.5)/sqrt(78))+35
((-1.645*4.5)/sqrt(78))+35
1/sqrt(20)
(1/sqrt(20))*1.645
4.7-((1/sqrt(20))*1.645)
4.7+((1/sqrt(20))*1.645)
2.576^2
(2.576/0.5)^2
4.7-5
(4.7-5)/(1/sqrt(20))
1.96*sqrt(20)
(1.96*sqrt(20))+5
(-1.96*sqrt(20))+5
414/726
1-0.57
0.57*0.43
(0.57*0.43)/726
sqrt((0.57*0.43)/726)
2.576*sqrt((0.57*0.43)/726)
0.57-(2.576*sqrt((0.57*0.43)/726))
0.57+(2.576*sqrt((0.57*0.43)/726))
0.5*0.5
(0.5*0.5)/726
sqrt((0.5*0.5)/726)
(0.57-0.5)/sqrt((0.5*0.5)/726)
0.5*.05
0.5*0.5
2.576/0.01
(2.576/0.01)^2
(2.576/0.01)^2*0.25
0.57+(2.576*sqrt((0.5*0.5)/726))
0.57-(2.576*sqrt((0.5*0.5)/726))
(0.57-0.7)/sqrt((0.7*0.7)/726)
(0.57-0.7)/sqrt((0.7*0.3)/726)
14/50
0.28*(1-0.28)
(0.28*(1-0.28))/50
sqrt((0.28*(1-0.28))/50)
2.576*sqrt((0.28*(1-0.28))/50)
0.28-(2.576*sqrt((0.28*(1-0.28))/50))
0.28+(2.576*sqrt((0.28*(1-0.28))/50))
(0.28-0.2)/sqrt((0.2*0.8)/50)
knitr::opts_chunk$set(echo = TRUE, eval = T)
?knitr::kable(data.frame(Resposta = c('D')))
setwd("~/CE003-madeireira")
posicao <- function(vetor){
table <- data.frame(Minimo = quantile(vetor, na.rm = T)[1],
Quartil_1 = quantile(vetor, na.rm = T)[2],
Media = mean(vetor, na.rm = T),
Mediana = quantile(vetor, na.rm = T)[3],
Quartil_3 = quantile(vetor, na.rm = T)[4],
Maximo = quantile(vetor, na.rm = T)[5])
row.names(table) <- NULL
table
}
dispersao <- function(vetor){
table <- data.frame(Amplitude = diff(range(vetor)),
Variancia = var(vetor),
Desvio_padrao = sd(vetor)#,
#Coef_variacao = 100*sd(vetor)/mean(vetor)
)
table
}
notas <- read.csv('controle/notas.csv', dec = ',')
DT::datatable(notas[,c('GRR', 'P1', 'P2', 'SOMA_REMOTAS')], class = 'cell-border stripe',
rownames = F,
#filter = 'top',
editable = T
)
notas <- read.csv('controle/notas.csv', dec = ',')
DT::datatable(notas[,c('GRR', 'P1', 'P2', 'P3', 'media_sem_remotas')], class = 'cell-border stripe',
rownames = F,
#filter = 'top',
editable = T
)
pander::pander(posicao(notas$P3))
library(ggplot2)
library(ggplot2)
library(ggpubr)
ggplot(notas) +
geom_histogram(aes(x=P3,
y=..density..),
position="identity",
col = 1,
lwd = 1,
breaks = seq(0,10,0.5)) +
geom_density(aes(x=P3,
y=..density..),
col = 4,
lwd = 1) +
ylab("Densidade") +
xlab("") +
ggtitle("Prova 3")+
theme_classic() + theme(legend.position = 'none',
plot.title = element_text(family = "Helvetica",
face = "bold",
size = (20),
hjust = 0.5),
axis.title = element_text(face = "bold",
size = 15),
text = element_text(size=15))
ggplot(data = notas,
mapping = aes(y=P3, x='1')) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(alpha = 1)+
#xlim(c(0,10)) +
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")+
ylab("Notas") +
xlab("") +
#ggtitle("Titulo")+
scale_y_continuous(limits = c(0, 10))+
theme_classic() + theme(legend.position = 'none',
plot.title = element_text(family = "Helvetica",
face = "bold",
size = (20),
hjust = 0.5),
axis.title = element_text(face = "bold",
size = 15),
axis.text.y=element_blank(),
text = element_text(size=15)) +coord_flip()
p1 = ggplot(notas) +
geom_histogram(aes(x=P3,
y=..density..),
position="identity",
col = 1,
lwd = 1,
breaks = seq(0,10,0.5)) +
geom_density(aes(x=P3,
y=..density..),
col = 4,
lwd = 1) +
ylab("Densidade") +
xlab("") +
ggtitle("Prova 3")+
theme_classic() + theme(legend.position = 'none',
plot.title = element_text(family = "Helvetica",
face = "bold",
size = (20),
hjust = 0.5),
axis.title = element_text(face = "bold",
size = 15),
text = element_text(size=15))
p2 = ggplot(data = notas,
mapping = aes(y=P3, x='1')) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(alpha = 1)+
#xlim(c(0,10)) +
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")+
ylab("Notas") +
xlab("") +
#ggtitle("Titulo")+
scale_y_continuous(limits = c(0, 10))+
theme_classic() + theme(legend.position = 'none',
plot.title = element_text(family = "Helvetica",
face = "bold",
size = (20),
hjust = 0.5),
axis.title = element_text(face = "bold",
size = 15),
axis.text.y=element_blank(),
text = element_text(size=15)) +coord_flip()
ggarrange(p1, p2,
heights = c(2, 1),
align = "hv",
ncol = 1,
nrow = 2)
rmarkdown::render_site()
rmarkdown::render_site()
getwd()
rmarkdown::render_site()
posicao <- function(vetor){
table <- data.frame(Minimo = quantile(vetor, na.rm = T)[1],
Quartil_1 = quantile(vetor, na.rm = T)[2],
Media = mean(vetor, na.rm = T),
Mediana = quantile(vetor, na.rm = T)[3],
Quartil_3 = quantile(vetor, na.rm = T)[4],
Maximo = quantile(vetor, na.rm = T)[5])
row.names(table) <- NULL
table
}
dispersao <- function(vetor){
table <- data.frame(Amplitude = diff(range(vetor)),
Variancia = var(vetor),
Desvio_padrao = sd(vetor)#,
#Coef_variacao = 100*sd(vetor)/mean(vetor)
)
table
}
notas <- read.csv('controle/notas.csv', dec = ',')
DT::datatable(notas[,c('GRR', 'P1', 'P2', 'P3', 'media_sem_remotas')], class = 'cell-border stripe',
rownames = F,
#filter = 'top',
editable = T
)
names(notas)
notas <- read.csv('controle/notas.csv', dec = ',')
DT::datatable(notas[,c('GRR', 'P1', 'P2', 'P3', 'REMOTAS',
'MÉDIA', 'SITUAÇÃO')], class = 'cell-border stripe',
rownames = F,
#filter = 'top',
editable = T
)
pander::pander(posicao(notas$REMOTAS))
library(ggplot2)
library(ggplot2)
library(ggpubr)
p1 = ggplot(notas) +
geom_histogram(aes(x=REMOTAS,
y=..density..),
position="identity",
col = 1,
lwd = 1,
breaks = seq(0,10,0.5)) +
geom_density(aes(x=REMOTAS,
y=..density..),
col = 4,
lwd = 1) +
ylab("Densidade") +
xlab("") +
ggtitle("REMOTAS")+
theme_classic() + theme(legend.position = 'none',
plot.title = element_text(family = "Helvetica",
face = "bold",
size = (20),
hjust = 0.5),
axis.title = element_text(face = "bold",
size = 15),
text = element_text(size=15))
p2 = ggplot(data = notas,
mapping = aes(y=REMOTAS, x='1')) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(alpha = 1)+
#xlim(c(0,10)) +
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")+
ylab("Notas") +
xlab("") +
#ggtitle("Titulo")+
scale_y_continuous(limits = c(0, 10))+
theme_classic() + theme(legend.position = 'none',
plot.title = element_text(family = "Helvetica",
face = "bold",
size = (20),
hjust = 0.5),
axis.title = element_text(face = "bold",
size = 15),
axis.text.y=element_blank(),
text = element_text(size=15)) +coord_flip()
ggarrange(p1, p2,
heights = c(2, 1),
align = "hv",
ncol = 1,
nrow = 2)
pander::pander(posicao(notas$MÉDIA))
p1 = ggplot(notas) +
geom_histogram(aes(x=MÉDIA,
y=..density..),
position="identity",
col = 1,
lwd = 1,
breaks = seq(0,10,0.5)) +
geom_density(aes(x=MÉDIA,
y=..density..),
col = 4,
lwd = 1) +
ylab("Densidade") +
xlab("") +
ggtitle("MÉDIA")+
theme_classic() + theme(legend.position = 'none',
plot.title = element_text(family = "Helvetica",
face = "bold",
size = (20),
hjust = 0.5),
axis.title = element_text(face = "bold",
size = 15),
text = element_text(size=15))
p2 = ggplot(data = notas,
mapping = aes(y=MÉDIA, x='1')) +
stat_boxplot(geom ='errorbar')+
geom_boxplot(alpha = 1)+
#xlim(c(0,10)) +
stat_summary(fun.y=mean,
geom="point",
shape=20,
size=3,
color="red",
fill="red")+
ylab("Notas") +
xlab("") +
#ggtitle("Titulo")+
scale_y_continuous(limits = c(0, 10))+
theme_classic() + theme(legend.position = 'none',
plot.title = element_text(family = "Helvetica",
face = "bold",
size = (20),
hjust = 0.5),
axis.title = element_text(face = "bold",
size = 15),
axis.text.y=element_blank(),
text = element_text(size=15)) +coord_flip()
ggarrange(p1, p2,
heights = c(2, 1),
align = "hv",
ncol = 1,
nrow = 2)
RMAR
rmarkdown::render_site()
